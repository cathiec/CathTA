# Adam Rogalewicz
# 
# SL to TA
# Join operator on system of predicates
#
# distrubuted under GNU GPL licence

class JoinFailed(Exception):
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return repr(self.value)



import input
import re

def create_intersection(a,b):
        #create list as an intersection between lists 
	return [val for val in a if val in b]

def get_list_position(item,l):
	if not item in l:
		l.append(item)
	return l.index(item)

def deleteandadd_call_item(prop_item,v_num,params_to_add,calls,to_remove):
        (p_name,params)=calls[prop_item]
        mod_params=list(params) # make a fresh copy
	if to_remove:
		mod_params.pop(v_num)
        mod_params.extend(list(params_to_add))
        calls[prop_item]=(p_name,mod_params)
        return calls

def change_call_item_pred(prop_item,prefix,v_num,calls,tp_item):
        p_name,params=calls[prop_item]
        calls[prop_item]=("%sx%sx%ix%i"%(prefix,p_name,v_num,tp_item),params)
        return calls

def add_on_position(l,pos,item):
	if pos==len(l):
		return list(l)+[item]
	if pos>len(l):
		raise JoinFailed("ERROR: This line should be not accessed")
	res=[]
	for i in range(len(l)):
		if i==pos:
			res.append(item)
		res.append(l[i])
	return res

def join_empty_heaps(empty1,empty2,candidate,to_remove):
	join=[]
	#first join the emptyheap equalities
	for disj1 in empty1:
		for disj2 in empty2:
			aux=list(disj1)+list(disj2)
			aux=input.join_equalities(aux)
			aux2=[]
			for i in aux:
				aux2.append(input.remove_multiple_occurences(i))
			join.append(aux2)
	# remove candidate if "to_remove" is set
	if to_remove:
		join2=[]
		for disj in join:
			disj2=[]
			for i in disj:
				if candidate in i:
					i.pop(i.index(candidate))
					if not len(i)==1:
						disj2.append(i)
				else:
					disj2.append(i)
			join2.append(disj2)
		join=join2					
	return join

def do_join(candidate,call,params,empty1,call2,params2,empty2,preds,par_intersect,to_remove):
	#LHS: call2,params2,empty2
	#RHS: call,params,empty1
	
	pos=input.get_param_numbers(params,candidate)
	if not len(pos)==1:
		raise JoinFailed("JOIN: Not implemented")
	params_prop=list(params)
	params_prop.pop(pos[0])
	# parameters equal to nil must get canonical names.
	nilnum=1
	for i in range(len(params_prop)):
		if "nil-X" in params_prop[i]:
			raise JoinFailed("JOIN: Name %s is forbiden in the input file"%params_prop[i])
		if params_prop[i]=="nil":
			params_prop[i]="nil-X%i"%nilnum
			nilnum=nilnum+1
	# check for the forbiden names in the params2
	for name in params2:
		if "nil-X" in name:
			raise JoinFailed("JOIN: Name %s is forbiden in the input file"%name)

	input.rename_conflicts_with_params(preds,params_prop) # this guarantee that params_prop are not used within the system of predicates
	# remove the parameters in the intersection between params and params2 different from candidate from params_prop
	params_prop_orig=list(params_prop) #make a copy
	tracked_params_RHS=[]
	tracked_params_LHS=[]
	for p in par_intersect:
		tracked_params_RHS.append(params_prop.index(p))
		tracked_params_LHS.append(params2.index(p))
	for p in par_intersect:
		params_prop.pop(params_prop.index(p))
	tracked_params=[tracked_params_LHS]

	new_params2=list(params2)+list(params_prop)
	# if candidate is existentially quantified, the it is not needed in the parameters any more
	if to_remove:
		new_params2.pop(params2.index(candidate))
	# rename all nil-X in new_params2 back to nil
	for i in range(len(new_params2)):
		if re.search("^nil-X",new_params2[i]):
			new_params2[i]="nil"
	# we have to track the parameter z from call2 and attach the call to the place, where z is reffered
	prefix=candidate
	while input.unique_pred_prefix(preds,prefix)==0:
		prefix=prefix+"X"
	TODO=[(call2,params2.index(candidate),0)]	
	DONE=[]
	new_call2="%sx%sx%ix0"%(prefix,call2,params2.index(candidate))
	while len(TODO):
		(p_name,v_num,t_pars)=TODO.pop()
		DONE.append((p_name,v_num,t_pars))
		# create a set of new parameters 
		new_params=list(preds[p_name][0])+list(params_prop)
		if to_remove:
			var_name=new_params.pop(v_num)
		else:
			var_name=new_params[v_num]
		# get names for the tracked parameters
		t_pars_local=[]
		for p in tracked_params[t_pars]:
			t_pars_local.append(new_params[p])
		# for all rules of the given predicate
		new_rules=[]
		for (alloc,pointsto,calls,equal) in preds[p_name][1]:
			if var_name==alloc or var_name in equal:
				#variable allocated - no join possible
				raise JoinFailed("Join ERROR: variable allocated")
			elif var_name in pointsto:
				(prop_pred,prop_item,prop_num)=input.propagated(var_name,calls)
				if prop_num==-1:
					# create a set of parameters according to params_prop_orig and t_pars_local
					pars=list(params_prop_orig)
					for i in range(len(tracked_params_RHS)):
						pars[tracked_params_RHS[i]]=t_pars_local[i]
					new_cls=list(calls)
					new_cls.append((call,add_on_position(pars,pos[0],var_name)))
					new_rules.append((alloc,pointsto,new_cls,equal))
					# inline the empty rule inside
					if not empty1==[]:
						for disjunct in empty1:
							# rename candidate by the local variable var_name
							local_copy=list(disjunct)
							for x in local_copy:
								for i in range(len(x)):
									if x[i]==candidate:
										x[i]=var_name
							new_rules.append(input.create_new_rule(alloc,pointsto,0,equal,new_params,local_copy,calls))
									
				else:
					raise JoinFailed("Join Error: variable %s refered and propagated in predicate %s"%(candidate,p_name))
			else:
				# tady je treba prepocitat tracked_params
				(prop_pred,prop_item,prop_var_num)=input.propagated(var_name,calls)
				if prop_var_num>=0:
					new_calls=deleteandadd_call_item(prop_item,prop_var_num,params_prop,list(calls),to_remove)
					# compute, how the tracked_variables are progressed
					t_vars_prop=[]
					for tv in t_pars_local:
						tv_pred,tv_item,tv_var_num=input.propagated(tv,calls)
						if not (tv_item==prop_item and prop_pred==tv_pred):
							raise JoinFailed("JOIN: complicated join, not implemented")
						t_vars_prop.append(tv_var_num)
					tp_item=get_list_position(t_vars_prop,tracked_params)
					# change the predicate name in the item "prop_item"
					new_calls=change_call_item_pred(prop_item,prefix,prop_var_num,new_calls,tp_item)

					new_rules.append((alloc,pointsto,new_calls,equal))
					if not(((prop_pred,prop_var_num,tp_item) in DONE) or ((prop_pred,prop_var_num,tp_item) in TODO)):
						TODO.append((prop_pred,prop_var_num,tp_item))
				else:
					raise JoinFailed("ERROR: variable %s not propagated (or multiple propagated) from the rule %s"%(candidate,p_name))

		# add the newly created predicate into a list of predicates
		preds["%sx%sx%ix%i"%(prefix,p_name,v_num,t_pars)]=(new_params,new_rules)

	# The case where LHS has empty heap is solved separatelly
	if not empty2==[]:
		print "XXXXX"
		print "empty2:", empty2,"empty: ",empty1
		print "new_params:", new_params2
		print "intersect on",candidate,"remove?:",to_remove
		new_empty=join_empty_heaps(empty1,empty2,candidate,to_remove)
		print "RES:", new_empty
		raise JoinFailed("JOIN: No join possible with empty heaps on LHS")


	return (new_call2,new_params2,[])



def join(preds,top_calls,emptyheap_eq,ex_quantified):
	while len(top_calls)>1:
		# pick the first call for the join
		call,params=top_calls.pop(0)
		if emptyheap_eq==[]:
			empty=[]
		else:
			empty=emptyheap_eq.pop(0)
		#find a second call for a join
		find=0
		for i in range(len(top_calls)):
			call2,params2=top_calls[i]
			if emptyheap_eq==[]:
				empty2=[]
			else:
				empty2=emptyheap_eq[i]
			p_intersect=create_intersection(params,params2)
			if not p_intersect==[]:
				top_calls.pop(i)
				if not emptyheap_eq==[]:
					emptyheap_eq.pop(i)
				find=1
				break
		if find==0:
			raise JoinFailed("Join failed")
		# find the candidate variable
		# - the candidate must be allocated in head of one of the calls
		# - the candidate must be an existentially quantified variable
		# - the candidate must be a link only between these two calls
		candidate=""
		for par in p_intersect:
			if (input.alloc(call,params.index(par),preds)):
				candidate=par
		if candidate=="":
			# swap positions of call and call2
			call_aux=call
			call=call2
			call2=call_aux
			params_aux=params
			params=params2
			params2=params_aux
			empty_aux=empty
			empty=empty2
			empty2=empty_aux
			for par in p_intersect:
				if (input.alloc(call,params.index(par),preds)):
					candidate=par
		if candidate=="":
			raise JoinFailed("Join failed")
		if candidate=="nil":
			raise JoinFailed("Something odd happened: nil taken as a candidate. nil existantially quantified in RootCall?")
		# create a list of other parameters (different from candidate and nil) shared between the two calls 
		# pop the "candidate"
		p_intersect.pop(p_intersect.index(candidate))
		# pop all "nil" variables
		while "nil" in p_intersect:
			p_intersect.pop(p_intersect.index("nil"))			

		#the candidate is removed from the parameters after join
		# if is it existentially quantified and it is not a parameter of other top level call
		to_remove=candidate in ex_quantified
		for (callX,paramsX) in top_calls:
			if candidate in paramsX:
				to_remove=False
				#raise JoinFailed("Join failed: parameter %s is in more the two calls on top level"%candidate)
		(call,params,empty)=do_join(candidate,call,params,empty,call2,params2,empty2,preds,p_intersect,to_remove)
		top_calls.append((call,params))
		if not emptyheap_eq==[]:
			emptyheap_eq.append(empty)
	
	root_rule,root_params=top_calls[0]
	if emptyheap_eq==[]:
		ret_empty=[]
	else:
		ret_empty=emptyheap_eq[0]
	return (root_rule,root_params,ret_empty)

