COMPILE = ../compile -slide
SLIDE = ../slide-wrapper.sh

BENCH = dll-entails-dll-rev.smt2 dll-spaghetti.smt2 tll-entails-node-tll-tll.smt2 dll-entails-node-dll-rev.smt2	dll2-entails-dll2-rev.smt2 tll-pp-entails-tll-pp-rev.smt2 dll-entails-node-node-dll.smt2 dll2-rev-entails-dll2.smt2 tll-pp-rev-entails-tll-pp.smt2 dll-mid-entails-dll-rev.smt2	dll2-spaghetti-existential.smt2 tll-ravioli-existential.smt2 dll-rev-entails-dll-mid.smt2 node-dll-rev-dll-entails-dll.smt2  tll-ravioli.smt2 dll-rev-entails-dll.smt2 node-node-dll-entails-dll.smt2 tree-pp-entails-tree-pp-rev.smt2 dll-spaghetti-existential.smt2 node-tll-tll-entails-tll.smt2 tree-pp-rev-entails-tree-pp.smt2 dll-entails-dll0+.smt2 dll2-spaghetti.smt2 tll-pp-rev-entails-tll-pp.smt2 

TST = 01.tst.smt2  05.tst.smt2  09.tst.smt2  13.tst.smt2  17.tst.smt2  21.tst.smt2 02.tst.smt2  06.tst.smt2  10.tst.smt2  14.tst.smt2  18.tst.smt2  22.tst.smt2 03.tst.smt2  07.tst.smt2  11.tst.smt2  15.tst.smt2  19.tst.smt2 04.tst.smt2  08.tst.smt2  12.tst.smt2  16.tst.smt2  20.tst.smt2

DLL_VC = dll-vc01.smt2  dll-vc04.smt2  dll-vc07.smt2  dll-vc10.smt2  dll-vc13.smt2 dll-vc02.smt2  dll-vc05.smt2  dll-vc08.smt2  dll-vc11.smt2 dll-vc03.smt2  dll-vc06.smt2  dll-vc09.smt2  dll-vc12.smt2

NLL_VC = nll-vc01.smt2  nll-vc04.smt2  nll-vc07.smt2  nll-vc10.smt2  nll-vc13.smt2  nll-vc16.smt2 nll-vc02.smt2  nll-vc05.smt2  nll-vc08.smt2  nll-vc11.smt2  nll-vc14.smt2 nll-vc03.smt2  nll-vc06.smt2  nll-vc09.smt2  nll-vc12.smt2  nll-vc15.smt2

LSS_VC = lss-vc01.smt2  lss-vc02.smt2  lss-vc03.smt2

APPEND = append_dll_slk-10.smt2  append_dll_slk-8.smt2 append_sll_cll_slk-18.smt2  append_sll_ls_slk-1.smt2  append_sll_slk-3.smt2 append_dll_slk-11.smt2  append_dll_slk-9.smt2 append_sll_cll_slk-1.smt2   append_sll_ls_slk-2.smt2  append_sll_slk-4.smt2 append_dll_slk-12.smt2  append_sll_cll_slk-10.smt2  append_sll_cll_slk-2.smt2   append_sll_ls_slk-3.smt2  append_sll_slk-5.smt2 append_dll_slk-1.smt2   append_sll_cll_slk-11.smt2  append_sll_cll_slk-3.smt2   append_sll_ls_slk-4.smt2  append_sll_slk-6.smt2 append_dll_slk-2.smt2   append_sll_cll_slk-12.smt2  append_sll_cll_slk-4.smt2   append_sll_ls_slk-5.smt2  append_sll_slk-7.smt2 append_dll_slk-3.smt2   append_sll_cll_slk-13.smt2  append_sll_cll_slk-5.smt2   append_sll_ls_slk-6.smt2  append_sll_slk-8.smt2 append_dll_slk-4.smt2   append_sll_cll_slk-14.smt2  append_sll_cll_slk-6.smt2   append_sll_ls_slk-7.smt2 append_dll_slk-5.smt2   append_sll_cll_slk-15.smt2  append_sll_cll_slk-7.smt2   append_sll_ls_slk-8.smt2 append_dll_slk-6.smt2   append_sll_cll_slk-16.smt2  append_sll_cll_slk-8.smt2   append_sll_slk-1.smt2 append_dll_slk-7.smt2   append_sll_cll_slk-17.smt2  append_sll_cll_slk-9.smt2   append_sll_slk-2.smt2

SKL = skl2-vc01.smt2  skl2-vc03.smt2  skl3-vc01.smt2  skl3-vc03.smt2  skl3-vc05.smt2  skl3-vc07.smt2  skl3-vc09.smt2 skl2-vc02.smt2  skl2-vc04.smt2  skl3-vc02.smt2  skl3-vc04.smt2  skl3-vc06.smt2  skl3-vc08.smt2  skl3-vc10.smt2

LSEG = elseg4_slk-1.smt2  elseg4_slk-5.smt2  elseg4_slk-9.smt2   lsegex4_slk-4.smt2 odd-lseg3_slk-2.smt2  odd-lseg3_slk-6.smt2 elseg4_slk-2.smt2  elseg4_slk-6.smt2  lsegex4_slk-1.smt2  lsegex4_slk-5.smt2 odd-lseg3_slk-3.smt2  odd-lseg3_slk-7.smt2 elseg4_slk-3.smt2  elseg4_slk-7.smt2  lsegex4_slk-2.smt2  lsegex4_slk-6.smt2 odd-lseg3_slk-4.smt2 elseg4_slk-4.smt2  elseg4_slk-8.smt2  lsegex4_slk-3.smt2  odd-lseg3_slk-1.smt2  odd-lseg3_slk-5.smt2

TLL_SLK = tll_slk-10.smt2  tll_slk-12.smt2  tll_slk-1.smt2  tll_slk-3.smt2  tll_slk-5.smt2  tll_slk-7.smt2  tll_slk-9.smt2 tll_slk-11.smt2  tll_slk-13.smt2  tll_slk-2.smt2  tll_slk-4.smt2  tll_slk-6.smt2  tll_slk-8.smt2


bench:
	@(\
		for i in $(BENCH);	 				\
		do echo "TESTING $$i ...";				\
		$(COMPILE) $$i > /dev/null 2> /dev/null;		\
		$(SLIDE) $$i.sld; 					\
		done;							\
	)

tst:
	@(\
                for i in $(TST);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

dll-vc:
	@(\
                for i in $(DLL_VC);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

nll-vc:
	@(\
                for i in $(NLL_VC);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

lss-vc:
	@(\
                for i in $(LSS_VC);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

append:
	@(\
                for i in $(APPEND);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

skl:
	@(\
                for i in $(SKL);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

lseg:
	@(\
                for i in $(LSEG);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

tll-slk:
	@(\
                for i in $(TLL_SLK);                                        \
                do echo "TESTING $$i ...";                              \
                $(COMPILE) $$i > /dev/null 2> /dev/null;                \
                $(SLIDE) $$i.sld;                                       \
                done;                                                   \
        )

clean: 
	rm -rf *.sld *~ *.out

